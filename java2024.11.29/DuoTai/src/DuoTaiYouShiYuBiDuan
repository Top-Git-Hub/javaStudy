多态的优势
在多态形式下,右边对象可以实现解耦合(调换),便于扩展和维护。
定义方法的时候,使用父类型作为参数,可以接收所有子类对象,体现多态的扩展性与便利。


多态的弊端
不能调用子类的特有功能
解决方案:
变回子类类型就可以了
需要转换的类型 新的对象= (需要转换的类型) 需要转换的对象


细节:转换的时候不能瞎转,如果转成其他类的类型,就会报错
a instanceof A:A是类，a是对象
判断a是否是A的实例对象
如果是,返回true
如果不是,返回false
a instanceof A d
先判断a是否为A类型,如果是,则强转成A类型,转换之后变量名为d
如果不是,则不强转,结果直接是false